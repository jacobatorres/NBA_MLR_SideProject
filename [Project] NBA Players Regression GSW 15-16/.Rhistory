summary(model2)
library(MASS)
step_NBA = stepAIC(model, direction="both")
step_NBA
summary(step_NBA)
step_RPM = stepAIC(model2, direction="both")
summary(step_RPM)
df_resid = data.frame(resid = residuals(model), pred = predict(model))
plot(df_resid$resid, df_resid$pred)
df_resid = data.frame(resid = residuals(model), pred = predict(model))
plot(resid, pred, data=df_resid)
# RPM
df_resid = data.frame(resid = residuals(model), pred = predict(model))
plot(resid, pred, data = df_resid)
plot(df$resid, df$pred, data = df_resid)
df_resid = data.frame(resid = residuals(model), pred = predict(model))
plot(df_resid$resid, df_resid$pred, data = df_resid)
df_resid = data.frame(resid = residuals(model), pred = predict(model))
plot(df_resid$resid, df_resid$pred)
View(RPM_data)
View(NBA_pbp_data)
NBA_and_RPM = merge(RPM_data, NBA_pbp_data, by = intersect(names(x), names(y)),
all.y = TRUE)
NBA_and_RPM = merge(RPM_data, NBA_pbp_data, by = 'id',
all.y = TRUE)
View(NBA_and_RPM)
NBA_and_RPM['id','secs.X']
NBA_and_RPM[c('id','secs.X')]
NBA_and_RPM[,c('id','secs.X')]
colnames(NBA_and_RPM)
NBA_and_RPM[,c("id","secs.X")]
subset(NBA_and_RPM, select=c("id", "X"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "ROM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "ROM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game.y"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "ROM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "ROM_total_OPP", "secs.x"))
subset(NBA_and_RPM, select=c("id"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "ROM_total_OPP"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x", "SFnum_G"))
subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game.y"))
NBA_RPM_trim = subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game.y"))
View(NBA-NBA_RPM_trim)
View(NBA_RPM_trim)
colnames(NBA_RPM_trim)[2]
colnames(NBA_RPM_trim)[4]
colnames(NBA_RPM_trim)[4] = "secs"
colnames(NBA_RPM_trim)[18] = "secs"
colnames(NBA_RPM_trim)[14] = "secs"
NBA_RPM_trim = subset(NBA_and_RPM, select=c("id", "RPM_total_GSW", "RPM_total_OPP", "secs.x", "SFnum_G", "PFnum_G","Cnum_G", "SGnum_G", "PGnum_G", "SFnum_O", "PFnum_O", "Cnum_O", "SGnum_O", "PGnum_O", "sO.sG.y", "game.y"))
colnames(NBA_RPM_trim)[15] = "sO.sG"
colnames(NBA_RPM_trim)[4] = "secs"
colnames(NBA_RPM_trim)[16] = "game"
###RPM meets NBA
model3 = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs + RPM_total_GSW
+ RPM_total_OPP,data = NBA_RPM_trim)
summary(model3)
step_3 = stepAIC(model3, direction='both')
summary(step_3)
model2 = lm(sO.sG ~ RPM_total_GSW + RPM_total_OPP + secs, data=RPM_data)
summary(model2)
step_RPM = stepAIC(model2, direction="both")
summary(step_RPM)
###RPM meets NBA
model3 = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs + RPM_total_GSW
+ RPM_total_OPP,data = NBA_RPM_trim)
summary(model3)
step_3 = stepAIC(model3, direction='both')
summary(step_3)
summary(step_RPM)
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
df_resid2 = data.frame(resid = residuals(model2), pred = predict(model2))
plot(df_resid2$resid, df_resid2$pred)
df_resid3 = data.frame(resid = residuals(model3), pred = predict(model3))
plot(df_resid3$resid, df_resid3$pred)
View(RPM_data)
NBA_pbp_data = read.csv("Pbp Positions for Regression.csv")
model = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_Osecs,data = NBA_pbp_data)
summary(model)
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
NBA_pbp_data = read.csv("Pbp Positions for Regression.csv")
model = lm(sO.sG ~
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs,data = NBA_pbp_data)
summary(model)
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
std_resid = rstandard(model)
cooks_D = cooks.distance(model)
hat_vals = hatvalues(model)
plot(hat_vals, std_resid, cex = 10*sqrt(cooks_D))
plot(hat_vals, std_resid)
plot(hat_vals, std_resid, cex = 10*sqrt(cooks_D))
plot(hat_vals, std_resid, cex = 10*sqrt(cooks_D))
abline(h=c(-2.5, 2.5), lty=2)
ab = data.frame(a = resid(model), b = rstandard(model))
View(ab)
ab = data.frame(a = resid(model), b = rstandard(model), c = predict(model))
plot(ab$c, ab$a)
plot(ab$b, ab$a)
plot(ab$c, ab$a)
plot(ab$c, ab$b)
plot(ab$c, ab$c)
plot(ab$c, ab$a)
resids_and_pred = data.frame(residual = resid(model), residual_z = rstandard(model), fitted.values = predict(model))
View(resids_and_pred)
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
resids_and_pred = data.frame(residual = resid(model), residual_z = rstandard(model), fitted.values = predict(model))
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
resids_and_pred = data.frame(residual = resid(model), residual_z = rstandard(model), fitted.values = predict(model))
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
dwtest(model)
library(lmtest)
dwtest(model)
install.packages("lmtest")
dwtest(model)
library(lmtest)
dwtest(model)
resid
resids
abs(resids)
plot(resids_and_pred$fitted.values, abs(resids_and_pred$residual))
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
hist(resids_and_pred$residual_z)
hist(resids_and_pred$residual)
hist(resids_and_pred$residual_z)
dwtest(model)
a = dwtest(model)
summary(a)
summary(model)
library(lmtest)
NBA_pbp_data = read.csv("Pbp Positions for Regression.csv")
model = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs,data = NBA_pbp_data)
summary(model)
#USE STEP
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
a =dwtest(model)
a =dwtest(step_NBA)
a
model$coefficients
model$coefficients[1]
model$coefficients[2]
model$coefficients[:]
model$coefficients[1:5]
model$coefficients[1:length(model$coefficients)]
model$coefficients[1:]
model$coefficients[:]
model$coefficients
for i in model$coefficients:
for (i in model$coefficients):
for (i in model$coefficients){}
for (i in model$coefficients){
print(i)}
for (i in model$coefficients){
if is.na(i) == o{print(i)}
is.na(i)
is.na(i) == 0
for (i in model$coefficients){
if is.na(i) == 0{print(i)}
if is.na(i) == 0 {
for (i in model$coefficients){
if (is.na(i) == 0) {
print (i)
}}
for (i in range(0, length(model$coefficients)){
for (i in seq(1,20)){
print(i)}
for (i in seq(0, length(model$coefficients)){
for (i in seq(0, length(model$coefficients))
r
for (i in seq(0, length(model$coefficients))
print (i)
std_resid = rstandard(model)
cooks_D = cooks.distance(model)
hat_vals = hatvalues(model)
plot(hat_vals, std_resid, cex = 10*sqrt(cooks_D))
abline(h=c(-2.5, 2.5), lty=2)
hist(resids_and_pred$residual)
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
terms = predict(model, type='terms')
terms
View(terms)
help(predict)
help(predict)
partial_resid = resid(model) + terms
View(partial_resid)
partial_resid[,1]
partial_resid[1]
y = partial_resid[,1]
View(NBA_pbp_data)
x = NBA_pbp_data[,"SFnum_G"]
x
plot(x,y)
y = partial_resid[,"secs"]
x = NBA_pbp_data[,"secs"]
plot(x,y)
terms = predict(model, type='terms')
partial_resid = resid(model) + terms
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
plot(x,y)
}
help(plot)
i
i + "asd"
paste(i, " ", sep='')
terms = predict(model, type='terms')
partial_resid = resid(model) + terms
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
title = paste(i, " vs error",sep='')
plot(title=title,x,y)
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
titl = paste(i, " vs error",sep='')
plot(title=titl,x,y)
}
help(plot)
library(MASS)
library(lmtest)
NBA_pbp_data = read.csv("Pbp Positions for Regression.csv")
model = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs,data = NBA_pbp_data)
summary(model)
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
typeof(model)
typeof(step_NBA)
#plot if there is influential data
std_resid = rstandard(step_NBA)
cooks_D = cooks.distance(step_NBA)
hat_vals = hatvalues(step_NBA)
plot(hat_vals, std_resid, cex = 10*sqrt(cooks_D))
abline(h=c(-2.5, 2.5), lty=2)
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
hist(resids_and_pred$residual)
# Analysis: it looks normally distributed
# check for homoscedasticity
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
terms = predict(model, type='terms')
partial_resid = resid(model) + terms
colnames(terms)
terms = predict(step_NBA, type='terms')
partial_resid = resid(step_NBA) + terms
terms = predict(step_NBA, type='terms')
partial_resid = resid(step_NBA) + terms
colnames(terms)
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
titl = paste(i, " vs error",sep='')
plot(title=titl,x,y)
}
summary(step_NBA)
library(ggplot2)
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
titl = paste(i, " vs error",sep='')
plot(title=titl,x,y)
ggplot(aes(x,y))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(aes(x,y))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
df_temp = data.frame(observed_data = x, resids = y)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(df_temp, aes(observed_data,resids))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
df_temp = data.frame(observed_data = x, resids = y)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1)
}
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1)
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
df_temp = data.frame(observed_data = x, resids = y)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_smooth(linetype=2)
}
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_smooth(linetype=2)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_smooth(linetype=2) + geom_line(df_temp, aes(observed_data,resids))
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_smooth(linetype=2) + geom_line(aes(observed_data,resids))
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
}
i = "secs"
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms,colors("blue"))))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms,fill='red')))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids),colour="blue")  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids),colour=variable)  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)))
}
variable <- c(rep("y1", 20), rep("y2", 20) )
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids),colour=variable)  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)) + scale_color_manual(values=c("#CC6666", "#9999CC")))
}
players = read.csv("NBA Dataset with RPM.csv")
View(players)
install.packages("caret")
library(caret)
sample(NBA_pbp_data, 10)
library(dplyr)
install.packages("dply")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
sample_n(NBA_pbp_data, 10)
library(dplyr)
NBA_2 <- NBA_pbp_data[sample(nrow(NBA_pbp_data)),]
View(NBA_2)
nrow(NBA_2)
nrow(NBA_2) / 100
setwd("C:/Users/jacob/Downloads/[Project] NBA Players Regression GSW 15-16")
library(MASS)
library(lmtest)
library(ggplot2)
NBA_pbp_data = read.csv("Pbp Positions for Regression.csv")
model = lm(sO.sG ~ SFnum_G + PFnum_G + Cnum_G + SGnum_G + PGnum_G +
SFnum_O + PFnum_O + Cnum_O + SGnum_O + PGnum_O + secs,data = NBA_pbp_data)
summary(model)
#USE STEP
step_NBA = stepAIC(model, direction="both")
summary(step_NBA)
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
hist(resids_and_pred$residual)
# Analysis: it looks normally distributed
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
hist(resids_and_pred$residual, title = "hi")
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
hist(resids_and_pred$residual)
title(main="main title", sub="sub-title",
xlab="x-axis label", ylab="y-axis label")
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
title(main="main title", sub="sub-title",
xlab="x-axis label", ylab="y-axis label")
hist(resids_and_pred$residual)
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
hist(main ="hi", resids_and_pred$residual)
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
residuals = resids_and_pred$residual
hist(main ="hi", residuals)
# check for normal distribution of errors
resids_and_pred = data.frame(residual = resid(step_NBA), residual_z = rstandard(step_NBA), fitted.values = predict(step_NBA))
residuals = resids_and_pred$residual
hist(main ="Distribution of the Residuals", residuals)
terms = predict(step_NBA, type='terms')
partial_resid = resid(step_NBA) + terms
variable <- c(rep("y1", 20), rep("y2", 20) )
# check for homoscedasticity
plot(resids_and_pred$fitted.values, resids_and_pred$residual)
plot(resids_and_pred$fitted.values, resids_and_pred$residual, main = "Fitted Values vs Residuals", xlab = "Fitted Values", ylab="Residuals")
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
print (ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms)) + scale_color_manual(values=c("#CC6666", "#9999CC")))
}
terms = predict(step_NBA, type='terms')
partial_resid = resid(step_NBA) + terms
variable <- c(rep("y1", 20), rep("y2", 20) )
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
pl = ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
print (pl +  labs(x = "New x label"))
}
variable <- c(rep("y1", 20), rep("y2", 20) )
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs error",sep='')
#plot(title=titl,x,y)
pl = ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
print (pl +  labs(x = "New x label",title = titl))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs Residual",sep='')
pl = ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
print (pl +  labs(x = i, y = "Residual", title = titl))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs Residual",sep='')
pl = ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
print (pl +  labs(x = i, y = "Residual", title = titl, colour = "Cylinders"))
}
for (i in colnames(partial_resid)) {
x = NBA_pbp_data[,i]
y = partial_resid[,i]
z = terms[,i]
df_temp = data.frame(observed_data = x, resids = y,Terms = z)
titl = paste(i, " vs Partial Residual",sep='')
pl = ggplot(df_temp, aes(observed_data,resids))  + geom_point(shape=1) + geom_line(aes(observed_data, Terms))
print (pl +  labs(x = i, y = "Partial Residual", title = titl, colour = "Cylinders"))
}
